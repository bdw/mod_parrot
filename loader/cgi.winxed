namespace cgi {
    class output : apache.output {
        function puts(string msg) {
            /* the big idea: i have a variable that keeps the number
             * of 'content-bytes' written, and as long as its zero
             * i may assume i'm dealing with headers of some kind,
             * and if that assumption doesn't look very good anymore,
             * i start writing content bytes. */
            if(self.bytesWritten == 0) {
                var lines = split("\n", msg);
                while(elements(lines) > 0) {
                    string payload = shift_string(lines);
                    int i = indexof(payload, ':');
                    if(indexof(payload, "HTTP") == 0) {
                        string s = substr(payload, 8);  
                        self.status(common.cut_number(s));
                    } else if(i > 0) {
                        // must be a header                    
                        string key = substr(payload, 0, i);
                        string val = substr(payload, i + 1);
                        if(upcase(key) == "STATUS") /* cgi how you annoy me */
                            self.status(common.cut_number(val));
                        else
                            self.header(key, val);
                    } else { // it is either the end of headers or a
                        // content line
                        if(length(payload) > 0)
                            unshift(lines, payload);
                        break;
                    }
                }
                if(elements(lines) > 0) 
                    self.write(join("\n", lines));
            } else {
                self.write(msg);
            }
        }
    }

    
    function run(string language, string fileName) {
        try {
            var os = new OS; /* OS is loaded in common and hence available */
            var byteCode = common.getBytecode(language, fileName);
            /* i might want to use a child interpreter instead of the current
             * one for various interesting reasons. But not now */
            var mainSub = byteCode.main_sub();
            /* there is a very serious misfeature in the cgi specification.
             * you see it here currently */
            string back = os.cwd();
            os.chdir(dirname(fileName)); /* as per CGI specificatoin */
            mainSub([ fileName ]);
            os.chdir(back);
        } catch(error) {
            if (error instanceof apache.error) {
                error.report(); /* nice error reporting */
            } else {
                throw error;
            }
        }
    }

    function setup(var request) {
        getinterp().stdin_handle(new apache.input(request));
        getinterp().stdout_handle(new output(request));
        var env = new Env;
        var headers = getstdin().headers();
        var parameters = getstdin().request();
        /* put headers first, we don't want the request variables to be
           overridden */
        for(string k in headers) {
            string value;
            env[common.cgiify(k)] = headers[k];
        }
        for(string k in parameters) {
            env[k] = parameters[k];
        }
    }

    function main[main](var args) {
        setup(args[0]);
        run(args[1][0], args[1][1]);
    }

}
