inline does(var obj, string role) return int {
    int rv;
    ${ does rv, obj, role };
    return rv;
}

namespace psgi {
    function main[main](var request, string language, string fileName) {
        run(language, fileName, new apache.output(request), setup(request));
    }

    class responder {
        var output;
        function responder(var output) {
            self.output = output;
        }
        
        function invoke[vtable](int status, var headers, var body[optional]) {
            self.writeHeader(status, headers);
            if(body) {
                self.writeBody(body);
            } else {
                return self.output;
            }
        }

        function writeHeader(int status, var headers) {
            self.output.status(status);
            for(string k in headers) {
                self.output.header(k, headers[k]);
            }
        }

        function writeBody(var body) {
            /* psgi is somewhat..  liberal */
            if(does(body, 'Handle')) { 
                self.output.write(body.readall()); /* Not every handle may implement it, though */
            } else if(does(body, 'array')) {
                for(string line in body) {
                    self.output.write(line);
                }
            } else {
                self.output.write(string(body));
            }
        }
    }

    function run(string language, string fileName, var output, var env) {
        try {
            var byteCode = common.getBytecode(language, fileName);
            var returnValue = byteCode.main_sub().invoke(env); 
            var response = new responder(output);
            if(does(returnValue, 'array') && elements(returnValue) == 3) {
                response.writeHeader(returnValue[0], returnValue[1]);
                response.writeBody(returnValue[2]);
            } else if(does(returnValue, 'invokable')) {
                returnValue.invoke(response);
            } else {
                throw new apache.error(500, 'Nonsense return value from PSGI application')
            }
        } catch(error) {
            if(error instanceof apache.error) {
                error.report();
            } else {
                throw error;
            }
        }
    }

    function setup(var request) {
        var env = {
            'psgi.multithread' : true,
            'psgi.multiprocess' : true,
            'psgi.nonblocking' : false,
            'psgi.streaming' : true,
            'psgi.run_once' : false,
            'psgi.version' : [1,1],
            'psgi.input' : new apache.input(request),
            'psgi.errors' : getinterp().stderr_handle()
        }; 
        var headers = env['psgi.input'].headers();
        for(var k in headers) {
            env[common.cgiify(k)] = headers[k];
        }
        var params = env['psgi.input'].request();
        for(var k in params) {
            env[k] = headers[k];
        }
        return env;
    }
}
