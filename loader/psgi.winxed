// Forward-declare classes
class apache.error;
class apache.input;
class apache.output;
class common.route;

namespace psgi {
    /* this should be a built-in people */
    inline does(var obj, string role) return int {
        int rv;
        ${ does rv, obj, role };
        return rv;
    }

    function main[main](var args) {
        run(args[1], new apache.output(args[0]), setup(args[0]));
    }

    class responder {
        var output;
        function responder(var output) {
            self.output = output;
        }

        function invoke[vtable](int status, var headers, var body[optional]) {
            self.writeHeader(status, headers);
            if(body) {
                self.writeBody(body);
            } else {
                return self.output;
            }
        }

        function writeHeader(int status, var headers) {
            self.output.status(status);
            for(string k in headers) {
                self.output.header(k, headers[k]);
            }
        }

        function writeBody(var body) {
            /* psgi is somewhat..  liberal */
            if(does(body, 'Handle')) {
                self.output.write(body.readall()); /* Not every handle may
                                                      implement readall, though */
            } else if(does(body, 'array')) {
                for(string line in body) {
                    self.output.write(line);
                }
            } else {
                self.output.write(string(body));
            }
        }
    }

    function run(var arg, var output, var env) {
        var route = new common.route(arg); 
        var returnValue = route(env); 
        var response = new responder(output);
        if(does(returnValue, 'array') && elements(returnValue) == 3) {
            response.writeHeader(returnValue[0], returnValue[1]);
            response.writeBody(returnValue[2]);
        } else if(does(returnValue, 'invokable')) {
            returnValue(response);
        } else {
            throw new apache.error(500, 'Nonsense return value from PSGI application')
        }
    }

    function setup(var request) {
        var env = {
            'psgi.multithread' : true, /* none of these are true now */
            'psgi.multiprocess' : true,
            'psgi.nonblocking' : false,
            'psgi.streaming' : true,
            'psgi.run_once' : false,
            'psgi.version' : [1,1],
            'psgi.input' : new apache.input(request),
            'psgi.errors' : getinterp().stderr_handle()
        };
        var headers = env['psgi.input'].headers();
        for(string k in headers) {
            env[common.cgiify(k)] = headers[k];
        }
        var params = env['psgi.input'].request();
        for(var k in params) {
            env[k] = headers[k];
        }
        return env;
    }
}
