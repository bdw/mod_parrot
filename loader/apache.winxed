namespace apache {
    class output {
        var request;
        var buffer;
        var contentWriter;
        var headerWriter;
        var bytesWritten; // content bytes only

        function output(var request) {
            self.init(request);
        }

        function init(var request) {
            self.request = request;
            self.contentWriter = dlfunc(null, "mod_parrot_write", "ipip");
            self.headerWriter = dlfunc(null, "mod_parrot_header_out", "vPPPp");
            self.buffer = new ByteBuffer; // warn then, I dare you
            self.bytesWritten = 0;
        }

        /* i split these functions because winxed does not have an easy way
         * to call super() methods. puts() is the entry point for the C
         * layer, write() for subclasses */
        function puts(string msg) {
            return self.write(msg);
        }

        function write(string msg) {
            var writer = self.contentWriter;
            self.buffer =: msg;
            int b = writer(self.buffer, elements(self.buffer), self.request);
            self.bytesWritten += b; // should check if this is larger than 0
            return b;
        }   

        function header(string key, string value) {
            var writer = self.headerWriter;
            writer(getinterp(), key, value, self.request);
        }

    }   
    
    class input {
        var contentReader;
        var headerReader;
        var requestReader;
        var setup;
        var request;
        var remaining;
        var bytesRead;
        var buffer;
        var readSize;

        function input(var request) {
            self.init(request);
        }

        function init(var request) {
            self.request = request;
            self.contentReader = dlfunc(null, "mod_parrot_read", "ipip");
            self.headerReader = dlfunc(null, "mod_parrot_headers_in", "PPp");
            self.requestReader = dlfunc(null, "mod_parrot_request_parameters", "PPp");
            self.buffer = new ByteBuffer;
            self.readSize = 16; // this should be configurable 
            var setupFunc = dlfunc(null, "mod_parrot_setup_input", "ip");
            self.remaining = setupFunc(request);
            self.bytesRead = 0;
        }
        
        function readline() {
            // until we have a buffering system, do not implement this.
            // it isn't all that sensible, after all
        }

        function readall() {
            var builder = new StringBuilder;
            while(self.remaining > 0) {
                string msg = self.read(self.readSize);
                push(builder, msg);
            }
            return string(builder);
        }

        function read(int size) {
            self.buffer =: size;
            var reader = self.contentReader;
            int readBytes = reader(self.buffer, size, self.request);
            if(readBytes > 0) {
                self.remaining -= readBytes;
                self.bytesRead += readBytes;
                return self.buffer.get_chars(0, readBytes, "binary");
            } else {
                self.remaining = 0;
                return "";
            }
        }
        
        function headers() {
            var reader = self.headerReader;
            return reader(getinterp(), self.request);
        }

        function request() {
            var reader = self.requestReader;
            return reader(getinterp(), self.request);
        }
    }

    function setup[main](var request) {
        getinterp().stdin_handle(new input(request));
        getinterp().stdout_handle(new output(request));            
    }
}
