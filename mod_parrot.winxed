function main[main](var args) {
    try {
		if(compreg("PIR") == null) {
			say("Dead as a PIR");
			debugRequest(args);
		} else {
			say("PIR Lives");
		}
		load_language('winxed');
		loadlib('os');
		var os = new 'OS'();
		string fileName = args['SCRIPT_NAME']; 
		fileName = 'foobar.winxed';
		if(os.exists(fileName) && os.can_read(fileName)) {
			cgiRun(fileName, args);
		} else {
			say(sprintf("Could not resolve %s", [fileName]));
			debugRequest(args);
		}
    } catch(e) { 
		say(e.message); 
		var bt = e.backtrace();
		for(int i = 0; i < elements(bt); i++) {
			var sub = bt[i]['sub'];
			var annotations = bt[i]['annotations'];
			if(sub != null)
				say(string(sub));
			for(var n in annotations)
				say(sprintf("%s: %s", [n, annotations[n]]));
		}	
	}	
}

function getBytecode(string fileName) {
	var handle = new 'FileHandle'();
	handle.open(fileName, "r");
	string source = handle.readall();
	var compiler = compreg('winxed');	
	var result = compiler.compile(source);
	return result;
}

function cgiRun(string fileName, var args) {
	var bytecode = getBytecode(fileName);
	var mainSub = bytecode.main_sub();
	mainSub([ fileName ]);
}

function debugRequest(args) {
	var input = getstdin();
	if(!input.isatty()) {
		string msg = input.readall();
		say(sprintf("POST data was %d bytes long", [ length(msg) ]));
	}
	for(var k in args) {
		string msg = sprintf("%s: %s", [k, args[k]]);
		say(msg);
	}
}
